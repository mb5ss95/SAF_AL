perfect binary tree
- node를 추가하는 순서
1. 제일 왼쪽부터 채워간다
2. 직접 연결된 노드에서 부모가 자식보다 우선 순위가 높아야됨

sort
데이터가 고정되어 있을 경우
우선순위가 중간 정도인 data에 접근할 경우

priority queue
데이터를 수정 및 변경할 경우

p.q -> 넣고 넣고, 뺄때는 우선순위 높은거 부터 뺀다
젤 빠른 성능을 내는자료구조 "힙 tree"
q
stack

힙 트리는 최대값을 빠리빨리 찾아주기 위한 이쁜 세팅
p.q 는 힙으로 구현이 되어있다
그런데 p.q/힙이랑 마구마구 섞어서 말한다
같은 의미로 불린다

힙트리는 하나 넣을때마다 높이만큼 시간이 걸린다
2^높이 -1 = n 개임
높이가 4층이면 15개임
시간 복잡도는 O(logN) ~= O(1)

sort 
1. 오름차순
2. 내림차순
3. 다중조건

P.Q
1. max 우선
2. min 우선
3. 다중조건 p.q

bfs 최단거리를 구하는방법
dijkstra, floyd warshal, bellman ford, a*

만능은 아님;
다이지스트라 방식으로 최단거리를 구하면 안되는 경우 - 거리(가중치)가 음수인 경우 안됨

1. 아직 확정하지 않은 점들 중에서 가장 짧은 거리(시작점으로부터)로 갈 수있는점 선택
2. 해당 점에서 갈수있는 모든 점들에 대한 거리 갱신